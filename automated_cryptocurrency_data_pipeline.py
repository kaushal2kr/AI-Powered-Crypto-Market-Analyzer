# -*- coding: utf-8 -*-
"""Automated Cryptocurrency Data Pipeline

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kqk4KgiUo5ZJ7U9mkCCdBpgEyGW6w8SF
"""

# ðŸ“Œ Install dependencies
!pip install requests transformers wordcloud fpdf matplotlib seaborn prophet -q

import requests, sqlite3, os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from transformers import pipeline
from fpdf import FPDF
from prophet import Prophet
from datetime import datetime

# ---- Step 1: Fetch BTC Price Data ----
url = "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart"
params = {"vs_currency": "usd", "days": "30"}  # last 30 days
response = requests.get(url, params=params).json()

prices = response["prices"]
btc_df = pd.DataFrame(prices, columns=["timestamp", "price"])
btc_df["timestamp"] = pd.to_datetime(btc_df["timestamp"], unit="ms")
btc_df.rename(columns={"timestamp": "ds", "price": "y"}, inplace=True)

# Save data
btc_df.to_csv("btc_prices.csv", index=False)

# ---- Step 2: Fetch Crypto News (Sample Headlines) ----
news = [
    "Bitcoin surges as institutional investors show renewed interest.",
    "BTC faces regulatory pressure amid global policy shifts.",
    "Crypto markets see volatility after Fed interest rate decision.",
    "Analysts predict Bitcoin could reach new all-time highs.",
    "Investors cautious as Bitcoin struggles to maintain support level."
]
news_df = pd.DataFrame(news, columns=["headline"])

# ---- Step 3: AI Sentiment Analysis on News ----
sentiment_model = pipeline("sentiment-analysis")
news_df["sentiment"] = news_df["headline"].apply(lambda x: sentiment_model(x)[0]['label'])

# ---- Step 4: Store in SQLite ----
conn = sqlite3.connect("crypto.db")
btc_df.to_sql("btc_prices", conn, if_exists="replace", index=False)
news_df.to_sql("crypto_news", conn, if_exists="replace", index=False)
conn.close()

# ---- Step 5: Data Visualizations ----
# BTC Price Trend
plt.figure(figsize=(10,5))
plt.plot(btc_df["ds"], btc_df["y"], label="BTC Price (USD)", color="blue")
plt.title("Bitcoin Price Trend (Last 30 Days)")
plt.xlabel("Date"); plt.ylabel("Price (USD)")
plt.legend()
plt.savefig("btc_trend.png")
plt.show()

# Sentiment Distribution
plt.figure(figsize=(6,4))
sns.countplot(x="sentiment", data=news_df, palette="Set2")
plt.title("Sentiment Analysis of Crypto News")
plt.savefig("sentiment.png")
plt.show()

# Word Cloud
text = " ".join(news_df["headline"])
wordcloud = WordCloud(width=800, height=400, background_color="white").generate(text)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Crypto News Word Cloud")
plt.savefig("wordcloud.png")
plt.show()

# ---- Step 6: BTC Price Forecast with Prophet ----
model = Prophet(daily_seasonality=True)
model.fit(btc_df)

future = model.make_future_dataframe(periods=7)  # forecast 7 days ahead
forecast = model.predict(future)

plt.figure(figsize=(10,5))
model.plot(forecast)
plt.title("BTC Price Forecast (Next 7 Days)")
plt.xlabel("Date"); plt.ylabel("Price (USD)")
plt.savefig("btc_forecast.png")
plt.show()

# ---- Step 7: PDF Report ----
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=14)
pdf.cell(200, 10, txt="AI-Powered Crypto Market Report", ln=True, align="C")
pdf.ln(10)

pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, txt=f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
pdf.multi_cell(0, 10, txt=f"BTC Data Points: {len(btc_df)}")
pdf.multi_cell(0, 10, txt=f"News Headlines Analyzed: {len(news_df)}")
pdf.multi_cell(0, 10, txt=f"Sentiment Breakdown:\n{news_df['sentiment'].value_counts().to_dict()}")

# Add Graphs
for img in ["btc_trend.png", "sentiment.png", "wordcloud.png", "btc_forecast.png"]:
    pdf.add_page()
    pdf.image(img, x=10, y=30, w=180)

pdf.output("AI_Crypto_Report.pdf")
print("âœ… Report saved as AI_Crypto_Report.pdf")